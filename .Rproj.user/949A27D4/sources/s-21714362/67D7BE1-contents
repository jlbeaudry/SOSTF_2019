---
title: "Swinburne Open Science Task Force Survey (2019)"
author: "Jennifer L Beaudry"
date: "January 23, 2020"
output:
 # word_document: default
  html_document: default
csl: apa-old-doi-prefix.csl
bibliography: Beaudry_Library.bib
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
```

# Overview

We conducted a survey to examine people's current use of open science practices, 
to examine their perceptions of these practices, and to examine their perceived
barriers to using these practices. 

This document presents an overview of their responses. 

```{r library, include=FALSE}
#load the library
library(tinytex)
library(knitr)
library(here)
library(tidyverse)
library(skimr)
library(plyr)
library(ggbeeswarm)
library(ggridges)
```


```{r import data, include=FALSE}
#import the data. Here I'm using my data from '1_read_data', rather than Jordy's revised one.
df <- read_csv (here::here("data", "clean_data.csv"))
```



## Estimates of Reproducibility by Perceived Crisis  

Participants were asked if they believed their field is experiencing a "reproducibility
crisis". X% indicated that they didn't know if there was a crisis, X% indicated that 
there was no crisis, X% indicated that there was a slight crisis, and X% indicated
that there was a significant reproducibility crisis in their field. 

The black bar is the mean estimate of reproducibility according to the level of 
perceived crisis. 

```{r crisis_by_estimate_figure, echo=FALSE, warning=TRUE}
#estimates of reproducibility by levels of crisis as a stripchart 
  #and the !is.na removes NA from the 'RepEstimate_1' variable). 
# This works fine, but can tweak to increase font size & perhaps add boxplot & remove background grid.
p <- ggplot(data = subset(df, !is.na(RepEstimate_1)), 
       aes(x=crisis, y=RepEstimate_1)) + 
  geom_jitter(position=position_jitter(height=0,width=.15),
              fill="blue",
              colour="blue",
              size = 2.2,
              alpha=.5) +
  stat_summary(fun.y=mean,
               fun.ymin=mean,
               fun.ymax=mean,
               geom='crossbar',
               width=0.5) +
  scale_x_discrete(name = "Do you think your field is experiencing a 'Reprodubility Crisis'?", limits = (c("Don't Know", "No Crisis", "Slight Crisis", "Significant Crisis"))) +
  scale_y_continuous(name = "Estimated %age of reproducible studies") +
  coord_cartesian(ylim = c(0,100)) +
  theme (text = element_text(size = 12))
p + ggtitle("Estimates of reproducibility by perceived crisis in field (n = 137)")

# if you want a separate file of the figure, use this code & it will be saved in the
  # figs folder
#ggsave(here::here("figs", "reprod_estimates_by_crisis.png"))
```

   
## Open Science Experience

This figure shows how many people have experience with open science practices. 

```{r os_experience_figure, echo=FALSE, warning=TRUE}
#and the !is.na removes NA from the 'RepEstimate_1' variable). This works fine, but can tweak
  #to increase font size & perhaps add boxplot & remove background grid.

# NEXT STEPS: MAKE THE VARIABLE A FACTOR IN THE DATASET ITSELF IN '2_CLEAN_DATA.R'
  # THEN ADJUST THIS CODE TO ACCOUNT FOR THAT...RE THE LIMITS & LABELS....

df$OverallExperience <- as.factor(df$OverallExperience)

p <- ggplot(data = subset(df, !is.na(OverallExperience)), 
       aes(OverallExperience)) + 
  geom_bar(
  colour = "black", 
  fill = "blue") 

p +  scale_x_discrete(name = "What is your experience with open science practices? (n = 208)",
                   limits=c("1","2","3","4"),
                   labels=c("Unaware", "Aware, but Not Used", "Some", "Extensive")) + 
  theme (text = element_text(size = 12))
  #scale_y_continuous(name = "Estimated %age of reproducible studies") +
  #coord_cartesian(ylim = c(0,100)) +
  #theme (text = element_text(size = 12))
#p + ggtitle("Estimates of reproducibility by perceived crisis in field (n = 137)")

```



## Additional questions to include

### Experience with practices..

### Concerns with practices....

### Barriers...


```{r skim df, eval=FALSE}
#As a quick first pass, we can use the 'skim()' function to get a simple overview of each variable:
#skim(df)
```

Now learning about group_by which appears to be a wonderful development!

```{r summary stats by group, eval = FALSE}
frames %>%
  group_by(test_item, sample_size, n_obs, condition) %>%
  summarise(response = mean(response)) %>% #can call "response" anything you want.
  ungroup() #get in this habit because otherwise you might retain the grouping elsewhere.
```

Now playing around with it to include more summary statistics, and to print out the different summary stats in a tiblle.

```{r more summary stats by group, eval=FALSE}
frames %>%
  group_by(test_item) %>%
  summarise(
    mean_resp = mean(response),
    sd_resp = sd(response),
    count = n()
  ) %>%
  ungroup

```

Now play with filter to get summary stats from just a subset of the sample (their responses to only the 'small' objects).

```{r fitlersmall, eval=FALSE}
average_response <- frames %>%
  group_by(test_item, sample_size, n_obs, condition) %>%
  summarise(response = mean(response)) %>%
  ungroup ()

average_response %>%
  filter(sample_size == "small") #this is not changing the average response variable because it still has everything in it.
```

Now play with arrange to get summary stats from just a subset of the sample (their responses to only the 'small' objects), and arrange by condition.

```{r arrangesmall, eval=FALSE}
average_response <- frames %>%
  group_by (test_item, sample_size, n_obs, condition) %>%
  summarise (response = mean(response)) %>%
  ungroup ()

average_response %>%
  filter (sample_size == "small") %>%
  arrange (condition)
```

Now play with select to build on filter & arrange, but to only show some of the columns.

```{r selectsmall, eval=FALSE}
average_response <- frames %>%
  group_by (test_item, sample_size, n_obs, condition) %>%
  summarise (response = mean(response)) %>%
  ungroup ()

average_response_small <- average_response %>%
  filter (sample_size == "small") %>%
  arrange (condition) %>%
  select (condition, test_item, response)

average_response_small

```

Now use mutate to create a new variable, which takes into account how many trials they completed.

```{r average response time small, eval=FALSE}
average_response_small <- average_response_small %>%
  mutate (generalisation = response/9) %>%
  select (-response) #now remove response because we don't need it any longer

average_response_small

```

