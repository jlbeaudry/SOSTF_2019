library(plyr)
library(tidyverse)
library(here)
read_qualtrics <- function(file, legacy = TRUE) {
a <- readr::read_csv(file)
if (legacy == FALSE) {
a <- a[3:nrow(a), ]
} else {
a <- a[2:nrow(a), ]
}
a %>% readr::type_convert(trim_ws = TRUE)
}
df <- here::here("data", "OS_Data_ID_Legacy.csv") %>% read_qualtrics()
library(tidyverse)
library(here)
library(plyr)
library(ggbeeswarm)
library(skimr)
library(ggridges)
#setting text label sizes
my_theme = theme(
plot.title = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
#estimates of reproducibility by levels of crisis as a stripchart
#and the !is.na removes NA from the crisis variable). This works fine, but can tweak
#to increase font size & perhaps add boxplot & remove background grid.
p <- ggplot(data = subset(df, !is.na(crisis)),
aes(x=crisis, y=RepEstimate_1)) +
geom_jitter(position=position_jitter(height=0,width=.15),
fill="blue",
colour="blue",
size = 2.2,
alpha=.5) +
stat_summary(fun.y=mean,
fun.ymin=mean,
fun.ymax=mean,
geom='crossbar',
width=0.5) +
scale_x_discrete(name = "Do you think your field is experiencing a 'Reprodubility Crisis'?",
limits=c("4","3","2","1"),
labels=c("Don't Know", "No Crisis", "Slight", "Significant")) +
scale_y_continuous(name = "Estimated %age of reproducible studies") +
coord_cartesian(ylim = c(0,100))
p + ggtitle("Estimates of reproducibility by perceived crisis in field")
ggsave(here::here("figs", "reprod_estimates_by_crisis.png"))
View(df)
# need to delete my test data (participant id = 1062)
df %>%
filter(ParticipantNumber != '1062')
df
View(df)
# need to delete my test data (participant id = 1062)
df %>%
filter(ParticipantNumber != c('1062'))
filter
filter?
?fitler
?filter
# need to delete my test data (participant id = 1062)
df %>%
filter(ParticipantNumber != 1062))
# need to delete my test data (participant id = 1062)
df %>%
filter(ParticipantNumber != 1062)
df
df %>%
filter(ParticipantNumber != "1062")
# need to delete my test data (participant id = 1062)
df %>%
filter(ParticipantNumber += "1062")
# need to delete my test data (participant id = 1062)
df %>%
filter(ParticipantNumber == "1062")
df %>%
filter(ParticipantNumber == "1062")
df
filter(df, ParticipantNumber == "1062")
df
View(df)
dfc <- df %>%
filter(df, ParticipantNumber == "1062")
dfc
dfc <- df %>%
filter(df, ParticipantNumber == "1062")
dfc <- df %>%
filter(ParticipantNumber == "1062")
dfc <- df %>%
filter(ParticipantNumber != "1062")
filter(ParticipantNumber != "1062")
dfc
df1 <- here::here("data", "OS_Data_ID_Legacy.csv") %>% read_qualtrics()
df <- df1 %>%
filter(ParticipantNumber != "1062")
df
write.csv(df, here("data", "Clean_Data.csv"))
write.csv(df, here("data", "clean_data.csv"))
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
library(tinytex)
library(knitr)
library(here)
library(tidyverse)
library(skimr)
loc <- here ("data", "clean_data.csv")
df <- read_csv(file = loc)
df
loc <- here ("data", "clean_data.csv")
df <- read_csv(file = loc)
loc <- here ("data", "clean_data.csv")
df <- read_csv(file = loc)
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
library(tinytex)
library(knitr)
library(here)
library(tidyverse)
library(skimr)
loc <- here ("data", "clean_data.csv")
df <- read_csv(file = loc)
df
skim(df)
#I want to use the legacy format data, but need to read it in.
library(plyr)
library(tidyverse)
library(here)
# Ling's 'read_qualtrics' function, modified to remove 'janitor_names'
read_qualtrics <- function(file, legacy = TRUE) {
a <- readr::read_csv(file)
if (legacy == FALSE) {
a <- a[3:nrow(a), ]
} else {
a <- a[2:nrow(a), ]
}
a %>% readr::type_convert(trim_ws = TRUE)
}
# pipe my function through the 'read_qualtrics' function
df1 <- here::here("data", "OS_Data_ID_Legacy.csv") %>% read_qualtrics()
# need to delete my test data (participant id = 1062) & assign it to a new object.
# should have 240 obs rather than 241. IF I END UP WITH A CLEAN DATA DOCUMENT, THEN
# I WILL INCLUDE THIS CODE THERE.
df <- df1 %>%
filter(ParticipantNumber != "1062")
df <- select (-V1, -V2)
df <- select (-"V1", -"V2")
df <- df %>%
select (-"V1", -"V2")
df <- df %>%
select (-V1:V9)
df <- df %>%
select (-V1:V9)
dfa <- df1 %>%
filter(ParticipantNumber != "1062")
df <- dfa %>%
select (-V1:V9)
df <- dfa %>%
select (-V1:-V9)
df <- dfa %>%
select (-V1:-V10)
#I want to use the legacy format data, but need to read it in.
library(plyr)
library(tidyverse)
library(here)
# Ling's 'read_qualtrics' function, modified to remove 'janitor_names'
read_qualtrics <- function(file, legacy = TRUE) {
a <- readr::read_csv(file)
if (legacy == FALSE) {
a <- a[3:nrow(a), ]
} else {
a <- a[2:nrow(a), ]
}
a %>% readr::type_convert(trim_ws = TRUE)
}
# pipe my function through the 'read_qualtrics' function
df1 <- here::here("data", "OS_Data_ID_Legacy.csv") %>% read_qualtrics()
# need to delete my test data (participant id = 1062) & assign it to a new object.
# should have 240 obs rather than 241. IF I END UP WITH A CLEAN DATA DOCUMENT, THEN
# I WILL INCLUDE THIS CODE THERE.
dfa <- df1 %>%
filter(ParticipantNumber != "1062")
# selects all columns except for from V1 to V10, which we don't need.
df <- dfa %>%
select (-V1:-V10)
# when done cleaning, write the data to a new file
write.csv(df, here("data", "clean_data.csv"))
#import the data. Here I'm using my data, rather than Jordy's revised one.
loc <- here ("data", "clean_data.csv")
df <- read_csv(file = loc)
#I want to use the legacy format data, but need to read it in.
library(plyr)
library(tidyverse)
library(here)
# Ling's 'read_qualtrics' function, modified to remove 'janitor_names'
read_qualtrics <- function(file, legacy = TRUE) {
a <- readr::read_csv(file)
if (legacy == FALSE) {
a <- a[3:nrow(a), ]
} else {
a <- a[2:nrow(a), ]
}
a %>% readr::type_convert(trim_ws = TRUE)
}
# pipe my function through the 'read_qualtrics' function
dfa <- here::here("data", "OS_Data_ID_Legacy.csv") %>% read_qualtrics()
# need to delete my test data (participant id = 1062) & assign it to a new object.
# should have 240 obs rather than 241. IF I END UP WITH A CLEAN DATA DOCUMENT, THEN
# I WILL INCLUDE THIS CODE THERE.
dfb <- dfa %>%
filter(ParticipantNumber != "1062")
# selects all columns except for from V1 to V10, which we don't need.
df <- dfb %>%
select (-V1:-V10)
# when done cleaning, write the data to a new file
write.csv(df, here("data", "clean_data.csv"))
#import the data. Here I'm using my data, rather than Jordy's revised one.
loc <- here ("data", "clean_data.csv")
df <- read_csv(file = loc)
#import the data. Here I'm using my data, rather than Jordy's revised one.
loc <- here ("data", "clean_data.csv")
df <- read_csv(file = loc)
#import the data. Here I'm using my data, rather than Jordy's revised one.
loc <- here ("data", "clean_data.csv")
df <- read_csv(file = loc)
#load the library
library(tinytex)
library(knitr)
library(here)
library(tidyverse)
library(skimr)
library(plyr)
library(ggbeeswarm)
library(ggridges)
#load the library
library(tinytex)
library(knitr)
library(here)
library(tidyverse)
library(skimr)
library(plyr)
library(ggbeeswarm)
library(ggridges)
#import the data. Here I'm using my data, rather than Jordy's revised one.
loc <- here("data", "clean_data.csv")
df <- read_csv(file = loc)
#import the data. Here I'm using my data, rather than Jordy's revised one.
loc <- here("data", "clean_data.csv")
df <- read_csv(file = loc)
skim(df)
